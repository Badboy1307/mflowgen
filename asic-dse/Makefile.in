#=========================================================================
# Makefile
#=========================================================================
# This generated Makefile chains together the asic flow steps for this
# design according to the design's configuration file. For each asic flow
# step, a make target is generated that contains the commands specified in
# the step's configuration file.
#
# Extra commonly useful targets are also provided:
#
# - all     : Execute all steps
# - clean   : Clean up junk
# - debug_* : Bring up debug view for Innovus targets
# - list    : List all configured steps, as well as their short names
#

#-------------------------------------------------------------------------
# Front matter
#-------------------------------------------------------------------------

default: all

# Disable built-in rules

.SUFFIXES:

# Base directory relative to the build directory. The base directory has
# the top-level steps directory, etc..

export relative_base_dir := ..

# Include the Makefrag

include $(relative_base_dir)/Makefrag

#-------------------------------------------------------------------------
# Generated variables from configuration
#-------------------------------------------------------------------------

steps = dc-synthesis innovus-flowsetup innovus-init innovus-place innovus-cts innovus-postctshold innovus-route innovus-postroute innovus-signoff

dependencies.dc-synthesis        = seed
dependencies.innovus-flowsetup   = dc-synthesis
dependencies.innovus-init        = innovus-flowsetup
dependencies.innovus-place       = innovus-init
dependencies.innovus-cts         = innovus-place
dependencies.innovus-postctshold = innovus-cts
dependencies.innovus-route       = innovus-postctshold
dependencies.innovus-postroute   = innovus-route
dependencies.innovus-signoff     = innovus-postroute
dependencies.all                 = innovus-signoff

export design_name = $(vmname)

#export design_flow_name = default
#export design_flow_name = 180nm-correlator
export design_flow_name = 180nm-correlator-chip

#-------------------------------------------------------------------------
# Directories
#-------------------------------------------------------------------------

# Absolute base directory, which is marked as the base directory because
# it has the base directory marker file in it. This small shell script
# searches up the directory hierarchy until it finds the marker file. Then
# it labels that directory as the absolute base directory.

export base_dir_marker   := .TOP
export absolute_base_dir := $(shell \
  x=$${PWD};                        \
  while [ "$$x" != "/" ]; do        \
    x=$$(dirname "$$x");            \
    find "$$x" -maxdepth 1 -name $(base_dir_marker) | xargs -I {} dirname {}; \
  done;)

# Master steps directory in the base directory which has all possible steps

export master_steps_dir = $(relative_base_dir)/steps

# Build directories

export steps_dir        = steps
export plugins_dir      = plugins
export logs_dir         = logs
export results_dir      = results
export reports_dir      = reports
export handoffs_dir     = handoffs
export timestamps_dir   = timestamps

#-------------------------------------------------------------------------
# Step management
#-------------------------------------------------------------------------
# Set up VPATH
#
# The VPATH variable is a list of directories to be searched for missing
# prerequisites.
#
# VPATH can be cleverly used to abstract the make tool's dependency
# tracking into "steps" that are easier for the user to understand and
# manipulate than the actual detailed Makefile dependencies. The interface
# is a list of flow steps (i.e., PHONY target files) in $(VPATH).

export VPATH = vpath

junk += $(VPATH)

# list
#
# Useful target that lists all configured steps and their short names. The
# abbreviated versions can be defined in each step's configuration file
# and should be defined as a variable called "abbr.name_of_the_step".
#
# The output will look similar to this:
#
# - dc-synthesis  : synth
# - innovus-init  : init
# - innovus-place : place
# - ...
#

list:
	@echo "--------------------------------------------------------------------------"
	@echo "Available steps targets"
	@echo "--------------------------------------------------------------------------"
	@echo
	@printf                          "%s %-20s   %s\n" ' ' "(Long Name)" "(Short Name)"
	@echo
	@$(foreach step, $(steps),printf "%s %-20s : %s\n" '-'  $(step)     $(abbr.$(step));)
	@echo

# runtimes
#
# Useful target that prints the runtimes for all steps given the
# timestamps for each step (e.g., innovus-place.start, innovus-place.end).
#
# Notes:
#
# - Using "date -f" reads and prints the date in the given file
# - Using "date +%s" formats into seconds since 1970-01-01 00:00:00 UTC
# - The "... 2>/dev/null || echo 0" returns "0" if the file does not exist
# - All bash variables need to be double escaped with $$myvariable
# - This sed command can be added to blank out zero-value printouts
#       sed "s/0 hr/    /; s/0 min/     /"
# - The total runtime is aggregated across all steps to compute the total.
#   This number might be different compared to subtracting the first/last
#   timestamps because the user might have paused between steps.

runtimes:
	@echo "--------------------------------------------------------------------------"
	@echo "Runtimes"
	@echo "--------------------------------------------------------------------------"
	@(tot_secs=0; \
    $(foreach step, $(steps), \
      end=$(shell date -f $(timestamps_dir)/$(step).end +%s 2>/dev/null || echo 0); \
      start=$(shell date -f $(timestamps_dir)/$(step).start +%s 2>/dev/null || echo 0); \
      step_secs=$$(( $$end - $$start )); \
      tot_secs=$$(($$tot_secs + $$step_secs)); \
      h=$$(( $$step_secs / 3600      )); \
      m=$$(( $$step_secs % 3600 / 60 )); \
      s=$$(( $$step_secs % 60        )); \
      printf '%-20s -- %2d hr %2d min %2d sec\n' $(step) $$h $$m $$s | \
        sed "s/0 hr/    /; s/0 min/     /";) \
    echo "--------------------------------------------------------------------------"; \
    h=$$(( $$tot_secs / 3600      )); \
    m=$$(( $$tot_secs % 3600 / 60 )); \
    s=$$(( $$tot_secs % 60        )); \
    printf '%-20s -- %2d hr %2d min %2d sec\n' "Total" $$h $$m $$s; )

#-------------------------------------------------------------------------
# Seeding the build directory
#-------------------------------------------------------------------------
# The "seed" target prepares the directory structure and assembles the
# "steps" directory with all of the configured asic flow steps for this
# design according to the configuration file. It also pulls all of the
# design-specific plugins into the "plugins" directory.

seed:
# Generate all asic flow directories
	@mkdir -p $(VPATH) $(steps_dir) $(plugins_dir)
	@mkdir -p $(logs_dir) $(results_dir) $(reports_dir) $(handoffs_dir)
	@mkdir -p $(timestamps_dir)
# Seed links to the master steps inside the steps directory
	@$(foreach x, $(steps),(cd $(steps_dir) && ln -sf ../$(relative_base_dir)/steps/$x .);)
# Pull design-specific plugins into the plugins directory
	@(cd $(plugins_dir) && ln -sf ../$(relative_base_dir)/designs/$(design_flow_name)/plugins/* .)
# Mark this step done
	@touch $(VPATH)/$@

junk += $(steps_dir) $(plugins_dir)
junk += $(logs_dir) $(results_dir) $(reports_dir) $(handoffs_dir)
junk += $(timestamps_dir)

#-------------------------------------------------------------------------
# Rules template for each step
#-------------------------------------------------------------------------
# This section defines the template used to generate the rules for each
# asic flow step.
#
# Each step in the steps directory should contain "configure.mk", which at
# minimum contains the command for running that step.
#
#     commands.myflowstep = echo "Running myflowstep"
#
# Note that more commands can be specified using a define:
#
#     define commands.myflowstep
#       echo "Running myflowstep"
#       echo "Done with myflowstep"
#     endef
#
# The following template includes the "configure.mk" for the step and then
# essentially just calls the command. The prerequisite is set according to
# the configuration generating this Makefile.

# step_template
#
# - $1: Name of the step (e.g., dc-synthesis)
#
# Additional features
#
# - ascii.myflowstep: (optional) This hook can be used to print a pretty
#                                banner for the step as text flies by

define step_template

include $$(master_steps_dir)/$1/configure.mk

# Primary command target for $1

$1: $$(dependencies.$1)
	@date > $$(timestamps_dir)/$1.start
ifdef ascii.$1
	$$(ascii.$1)
endif
	$$(commands.$1)
	@date > $$(timestamps_dir)/$1.end
	@touch $(VPATH)/$1

endef

#-------------------------------------------------------------------------
# Generate targets for all steps
#-------------------------------------------------------------------------

$(foreach step, $(steps), \
  $(eval $(call step_template,$(step))))

all: $(dependencies.all)

#-------------------------------------------------------------------------
# Misc
#-------------------------------------------------------------------------

.PHONY: clean

clean:
	rm -rf $(junk)

# Generic target to execute commands with environment variables set from
# the Makefile.
#
# One particularly useful target is "make run_bash", which gives you a
# new shell with all exported environment variables from the Makefile.

run_%:
	$*

# Colors for printouts

echo_green   = '\033[92m'
echo_nocolor = '\033[0m'

