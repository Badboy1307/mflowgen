//-----------------------------------------------------------------------------
// ctorng -- Steps to generate HostButterfree.swshim.v
//-----------------------------------------------------------------------------
// We need a copy of the SwShim in Verilog to attach to the Verilog test
// harness. Unfortunately, we need to translate the DUT (e.g.,
// HostGcdUnit) and blackbox it, and I don't think we can get the Verilog
// SwShim without modifying the test verilog. in order to get the SwShim,
// we just re-translate targeting the SwShim.
//
// 1. Run py.test --test-verilog to get the normal DUT
// 2. Modify the files and translate again to get SwShim
// 3. Rename SwShim to match whatever the Verilog test harness expects
// 4. Go to the DUT instantiation in the SwShim and change the pins to be
//    "*_io" to match the hardware shim
// 5. Delete the DUT module in the SwShim Verilog file (e.g.,"HostGcdUnit")
//
//-----------------------------------------------------------------------------
// ctorng -- Steps to generate HostButterfree_blackbox.v
//-----------------------------------------------------------------------------
// We need to add the pads to the top of this file and rename the pins.
// We also need to remove definitions of sram blackboxes, since otherwise
// VCS will use the empty definitions instead of the SRAM verilog
// definitions.
//
// 1. Copy the IO pad section from HostGcdUnit.v into the top of the DUT
// 2. Rename the ports of the DUT to have "*_io" suffix (e.g., "clk_io")
// 3. Remove any definitions of black box SRAMs
//
