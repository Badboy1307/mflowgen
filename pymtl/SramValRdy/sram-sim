#!/usr/bin/env python
#=========================================================================
# sram-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {rtl}
#  --input <dataset>   {random, allzero, allone}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --translate         Translate RTL model to Verilog
#  --dump-vcd          Dump VCD to sort-<impl>-<input>.vcd
#  --tech_node         Specify specific technology node to swap-in cells
#
# Author : Christopher Batten & Khalid Al-Hawaj
# Date   : February 5, 2015   & April 25, 2018
#

from __future__ import print_function

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random

from random                   import randint
from pymtl                    import *
from SramValRdyPRTL           import SramValRdyPRTL
from SramValRdy.test.SramValRdyPRTL_test import random_msgs, allN_msgs, TestHarness

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="rtl",
                  choices=["rtl"] )
  p.add_argument( "--input", default="random",
                  choices=["random","allzero","allone"] )

  p.add_argument( "--trace",          action="store_true" )
  p.add_argument( "--stats",          action="store_true" )
  p.add_argument( "--translate",      action="store_true" )
  p.add_argument( "--dump-vcd",       action="store_true" )

  p.add_argument( "--tech_node", default="generic",
                  choices=["generic","28nm"] )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Instantiate the model

  model_impl_dict = {
    'rtl'   : SramValRdyPRTL,
  }

  model = model_impl_dict[ opts.impl ]

  # Create input datasets

  nmsgs = 150
  msgs = None

  num_bits  = model.num_bits
  num_words = model.num_words

  if   opts.input == "random":
    msgs = random_msgs( base_addr = 0x0     , num_msgs  = nmsgs     ,
                        num_bits  = num_bits, num_words = num_words )
  elif opts.input == "allzero":
    msgs = allN_msgs( num      = 0x0     , base_addr = 0x0       , num_msgs=nmsgs ,
                      num_bits = num_bits, num_words = num_words                  )
  elif opts.input == "allone":
    msgs = allN_msgs( num      = 0xffffffffffffffff, base_addr = 0x0      , num_msgs=nmsgs ,
                      num_bits = num_bits          , num_words = num_words                 )

  # VCD dumping

  dump_vcd = ""
  if opts.dump_vcd:
    dump_vcd = "sram-" + opts.impl + "-" + opts.input + ".vcd"

  # Translation
  test_verilog = False
  if opts.translate:
    if opts.impl.startswith("rtl"):
      test_verilog = True
    else:
      print("\n ERROR: --translate only works with RTL models \n")
      exit(1)

  # Harden Verilog
  tech_node = opts.tech_node

  harness = TestHarness( msgs[::2], msgs[1::2],
                         0, 0,
                         model, dump_vcd, test_verilog, tech_node )

  # Eleborate model and create simulator

  harness.elaborate()
  sim = SimulationTool( harness )
  sim.reset()

  # Tick simulator until evaluation is finished

  while not harness.done():
    if opts.trace:
      sim.print_line_trace()
    sim.cycle()

main()

