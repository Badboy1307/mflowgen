//========================================================================
// DW_fp_mult_test.v
//========================================================================
// Pure-Verilog test harness. I have included the first ~50 tests from
// the TestFloat tests. It passses all but the two tests marked nan. From
// the DesignWare documentation:
//
// "Although the NaN generated by a DWFP component (when ieee_compliance
// = 1) has the significand value 1, the input received by any component
// is considered a NaN when it has a non-zero significand value and
// exponent value equals to Einf."
//
// If you look at the two failing test cases the actual result is:
// 0x7f800001. This has a significand value of one and is a valid NaN ...
// so I think this is correct?
//
// Note that it is weird that these tests pass in pure-Verilog simulation
// but many of these (more than just the two nan tests) fail in
// Verilator. Maybe a Verilator bug?
//
// How to run the test using a verilog simulator:
//
//  % $(VCOMP) -o DW_fp_mult_test DW_fp_mult_test.v
//  % ./DW_fp_mult_test
//
// where VCOMP is either iverilog or vcs.
//

`include "DW_fp_mult.v"

module top;

  reg  [31:0] a;
  reg  [31:0] b;
  reg  [ 2:0] rnd;
  wire [31:0] z;
  wire [ 7:0] status;

  DW_fp_mult
  #(
    .ieee_compliance (1)
  )
  dut
  (
    .a      (a),
    .b      (b),
    .rnd    (rnd),
    .z      (z),
    .status (status)
  );

  task test
  (
    input [31:0] test_a,
    input [31:0] test_b,
    input [32:0] test_z
  );
  begin
    a   = test_a;
    b   = test_b;
    rnd = 3'b000;
    #10;
    $display( " a = %x, b = %x, z = %x ", a, b, z );
    if ( z != test_z ) begin
      $display( "ERROR: z, expected = %x, actual = %x", test_z, z );
    end
  end
  endtask
  initial begin

    $dumpfile("test.vcd");
    $dumpvars;

    #11;

    test( 32'h3f000000, 32'h40800000, 32'h40000000 );
    test( 32'h3e4ccccd, 32'h3e4ccccd, 32'h3d23d70b );

    test( 32'h8683F7FF, 32'hC07F3FFF, 32'h07839504 );
    test( 32'h00000000, 32'h3C072C85, 32'h00000000 );
    test( 32'h9EDE38F7, 32'h3E7F7F7F, 32'h9DDDC96B );
    test( 32'hDF7EFFFF, 32'h00000000, 32'h80000000 );
    test( 32'h4F951295, 32'h41E00002, 32'h52027044 );
    test( 32'h00000000, 32'h00000000, 32'h00000000 );
    test( 32'hC2800040, 32'h4FFFDFF7, 32'hD2FFE077 );
    test( 32'h00000000, 32'hBFFFFFCF, 32'h80000000 );
    test( 32'h015E834A, 32'hC700FFBF, 32'h88E03FE0 );
    test( 32'hCE7C0007, 32'h00000001, 32'h83FC0007 );
    test( 32'hBE5FEFFF, 32'h417FEBFF, 32'hC05FDE7F );
    test( 32'h00000000, 32'h00000001, 32'h00000000 );
    test( 32'hCE7D4590, 32'hC0FFFC3F, 32'h4FFD41D9 );
    test( 32'h00000000, 32'h41FFFFEB, 32'h00000000 );
    test( 32'h137F7FFB, 32'hA68002FE, 32'h800007FC );
    test( 32'h7FFF0007, 32'h007FFFFF, 32'h7FFF0007 ); // nan
    test( 32'h2BFFFFCF, 32'hDE00ACFD, 32'hCA80ACE4 );
    test( 32'h00000000, 32'h007FFFFF, 32'h00000000 );
    test( 32'h760077FF, 32'hBCB1B7E5, 32'hF3325E80 );
    test( 32'h00000000, 32'h340000EF, 32'h00000000 );
    test( 32'h0100087F, 32'hFE804FFF, 32'hC0005883 );
    test( 32'h3D900000, 32'h007FFFFE, 32'h00090000 );
    test( 32'hBED56444, 32'h3E7FF400, 32'hBDD55A43 );
    test( 32'h00000000, 32'h007FFFFE, 32'h00000000 );
    test( 32'h5E7F8003, 32'hBEC111F7, 32'hDDC0B170 );
    test( 32'h00000000, 32'hDE040000, 32'h80000000 );
    test( 32'h3FFFF7FE, 32'h4E00FFEE, 32'h4E80FBE5 );
    test( 32'hC08400FF, 32'h00800000, 32'h818400FF );
    test( 32'hC2D0AA48, 32'hCE820FFF, 32'h51D40705 );
    test( 32'h00000000, 32'h00800000, 32'h00000000 );
    test( 32'hBFFC1000, 32'hC11DF309, 32'h419B851C );
    test( 32'h00000000, 32'hCBCF3EA9, 32'h80000000 );
    test( 32'h3EFFFFFD, 32'hFF8000FD, 32'hFFC000FD ); // nan
    test( 32'h69FFFF7F, 32'h00800001, 32'h2AFFFF81 );
    test( 32'hBE000081, 32'h40DD6229, 32'hBF5D6308 );
    test( 32'h00000000, 32'h00800001, 32'h00000000 );
    test( 32'h4BF7BFFF, 32'hDA7EEFFF, 32'hE6F6B8C2 );
    test( 32'h00000000, 32'hB4FF8003, 32'h80000000 );
    test( 32'hBF7FFF7B, 32'hBE30FFBE, 32'h3E30FF62 );
    test( 32'hC00FFFEE, 32'h00FFFFFF, 32'h818FFFED );
    test( 32'h33BFFF7E, 32'h46FE00FE, 32'h3B3E803E );
    test( 32'h00000000, 32'h00FFFFFF, 32'h00000000 );
    test( 32'hDA5F117A, 32'h39409B1B, 32'hD427D443 );
    test( 32'h00000000, 32'h5FAFF4F6, 32'h00000000 );
    test( 32'hC1FBFFFC, 32'hB5FE0100, 32'h387A08F8 );
    test( 32'h410000FD, 32'h00FFFFFE, 32'h028000FC );
    test( 32'hBFFFFE03, 32'h4EEC20DF, 32'hCF6C1F0A );
    test( 32'h00000000, 32'h00FFFFFE, 32'h00000000 );
    test( 32'hC120000F, 32'h25FFEFBF, 32'hA79FF5E6 );
    test( 32'h00000000, 32'hA800081E, 32'h80000000 );

    $finish;
  end

endmodule

